import { GetServerSideProps } from "next";
import type { NextPage } from "next";
import Head from "next/head";
import { prisma } from "../db/client";
import { trpc } from "../utils/trpc";
import React from "react";
import Link from "next/link";
import { FilmCard, FilmWidget, Genres } from "../components";
import { Film, Genre } from "../utils/interfaces";
import Header from "../components/Header";

const LanguageCreator: React.FC = () => {
  const inputRef = React.useRef<HTMLInputElement>(null);
  const client = trpc.useContext();
  const { mutate, isLoading } = trpc.useMutation("languages.create", {
    onSuccess: (data) => {
      client.invalidateQueries(["languages.getAll"]);
      if (!inputRef.current) return;
      inputRef.current.value = "";
    },
  });
  return (
    <input
      ref={inputRef}
      disabled={isLoading}
      onKeyDown={(event) => {
        if (event.key === "Enter") {
          mutate({ language: event.currentTarget.value });
        }
      }}
    ></input>
  );
};

const Index: NextPage = (props: any) => {
  const accounts = trpc.useQuery(["accounts.getAll"]);
  const films = trpc.useQuery(["films.getAll"]);
  const genres = trpc.useQuery(["genres.getAll"]);
  const languages = trpc.useQuery(["languages.getAll"]);

  if (films.isLoading || accounts.isLoading || !films || !accounts)
    return <div>Loading...</div>;
  return (
    <div className="container mx-auto px-10 mb-8">
      <Head>
        <title>Frumatic Case App | Janberk Ucar</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header genres={genres?.data?.genres as Genre[]}></Header>
      <main>
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-12 ">
          <div className="lg:col-span-8 col-span-1">
            {films.data?.films.map((film: any) => {
              return <FilmCard key={film?.id} film={film as Film}></FilmCard>;
            })}
          </div>
          <div className="lg:col-span-4 col-span-1">
            <div className="lg:sticky relative top-8">
              <FilmWidget films={films?.data?.films as Film[]}></FilmWidget>
              <Genres genres={genres?.data?.genres as Genre[]}></Genres>
            </div>
          </div>
        </div>

        {/* REFERENCE  */}
        {/* <h1 className="self-center text-3xl font-bold ">Frumatic Case App </h1>
        <div className="flex flex-col w-100 overflow-hidden items-center"> */}
        {/* Films */}
        {/* {films.data?.films.map((film: any) => (
            <div key={film?.id} className="w-1/2 flex m-4">
              <Link href={`film//${film?.id}`}>
                <a>
                  <h3>Title: {film?.title}</h3>
                  <h3>Overview: {film?.overview}</h3>

                  <h3>Popularity: {film?.popularity}</h3>
                  <h3>Vote Average: {film?.vote_average}</h3>
                  <h3>Vote Count: {film?.vote_count}</h3>
                  <h3>Budget: {film?.budget}</h3>

                  <h3>
                    Release Date: {film?.release_date.toLocaleDateString()}
                  </h3>
                  <h3>Created At: {film?.createdAt.toLocaleDateString()}</h3>
                </a>
              </Link>
            </div>
          ))}
          <code>{props.films}</code>
          <br /> */}
        {/* Accounts */}
        {/* {accounts.data?.accounts.map((account: any) => (
            <div key={account?.id} className="w-1/2 flex m-4">
              <Link href={`account//${account?.id}`}>
                <a>
                  <h3>Adult: {account?.adult.toString()}</h3>
                  <h3>Avatar Hash: {account?.avatarHash}</h3>
                  <h3>Full Name : {account?.nameFull_name}</h3>
                  <h3>User Name : {account?.username}</h3>
                </a>
              </Link>
            </div>
          ))}
          <code>{props.account}</code>
          <br /> */}
        {/* Genres */}
        {/* {genres.data?.genres.map((genre: any) => (
            <div key={genre?.genre_id} className="w-1/2 flex m-4">
              <Link href={`genre//${genre?.genre_id}`}>
                <a>
                  <h3>FilmId: {genre?.filmId}</h3>
                  <h3>Genre Id: {genre?.genre_id}</h3>
                  <h3>Name : {genre?.name}</h3>
                </a>
              </Link>
            </div>
          ))}
          <code>{props.genres}</code> */}
        {/* Languages */}
        {/* <LanguageCreator />{" "}
          {languages.data?.languages.map((language: any) => (
            <div key={language?.filmId} className="w-1/2 flex m-4">
              <Link href={`language//${language?.filmId}`}>
                <a>
                  <h3>FilmId: {language?.filmId}</h3>
                  <h3>Language: {language?.language}</h3>
                </a>
              </Link>
            </div>
          ))}
          <code>{props.languages}</code>
        </div> */}
      </main>
      <footer className=""></footer>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const accountData = await prisma.account.findMany();
  const filmData = await prisma.film.findMany();
  const genreData = await prisma.genre.findMany();
  const languageData = await prisma.language.findMany();

  return {
    props: {
      account: JSON.stringify(accountData),
      films: JSON.stringify(filmData),
      genres: JSON.stringify(genreData),
      languages: JSON.stringify(languageData),
    },
  };
};

export default Index;
